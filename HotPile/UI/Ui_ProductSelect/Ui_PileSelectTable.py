# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'd:\HotPile\UI\PileSelectTable.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import os
import numpy
import math
import xlsxwriter as xw
from PyQt5 import QtCore, QtGui, QtWidgets
from Subassembly import LineStack,Ui_setbox,CheckBoxInTable,YeSaiTable,MyTable
from Tools import ProductSelect
import gl


class Ui_PileSelectTable(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1800*gl.w, 1000*gl.h)
        self.shaixuanInfo=''
        self.productlist=[]
        self.compareButton = QtWidgets.QPushButton(Form)
        self.compareButton.setGeometry(QtCore.QRect(1120*gl.w, 510*gl.h, 75*gl.w, 23*gl.h))
        self.compareButton.setObjectName("compareButton")
        self.ExportButton = QtWidgets.QPushButton(Form)
        self.ExportButton.setGeometry(QtCore.QRect(1020*gl.w, 510*gl.h, 75*gl.w, 23*gl.h))
        self.ExportButton.setObjectName("ExportButton")
        self.myTable=MyTable.TableDemo(Form)
        self.myTable.setGeometry(QtCore.QRect(0, 20*gl.h, 1200*gl.w, 480*gl.h))
        self.myTable.mySignal.connect(self.MakeYeSaiTable)
        # self.tableWidget = QtWidgets.QTableWidget(Form)
        # self.tableWidget.setGeometry(QtCore.QRect(0, 20, 1200, 480))
        # self.tableWidget.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        # self.tableWidget.verticalHeader().setVisible(False) 
        # sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        # sizePolicy.setHorizontalStretch(0)
        # sizePolicy.setVerticalStretch(0)
        # sizePolicy.setHeightForWidth(self.tableWidget.sizePolicy().hasHeightForWidth())
        # self.tableWidget.setSizePolicy(sizePolicy)
        # self.tableWidget.setObjectName("tableWidget")
        # self.tableWidget.setColumnCount(14)
        # self.tableWidget.setRowCount(0)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setHorizontalHeaderItem(0, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setHorizontalHeaderItem(1, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setHorizontalHeaderItem(2, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setHorizontalHeaderItem(3, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setHorizontalHeaderItem(4, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setHorizontalHeaderItem(5, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setHorizontalHeaderItem(6, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setHorizontalHeaderItem(7, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setHorizontalHeaderItem(8, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setHorizontalHeaderItem(9, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setHorizontalHeaderItem(10, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setHorizontalHeaderItem(11, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setHorizontalHeaderItem(12, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setHorizontalHeaderItem(13, item)
        # self.tableWidget.horizontalHeader().setCascadingSectionResizes(True)
        # self.tableWidget.horizontalHeader().setMinimumSectionSize(50)
        self.compareButton.clicked.connect(lambda:self.DrowCompare())
        self.ExportButton.clicked.connect(lambda:self.Export())

        # self.pp=LineStack.ChartView(Form)
        # self.pp.setGeometry(QtCore.QRect(0, 450, 1100, 436))
        # # self.pp.setObjectName("label")
        # self.pp.show()
        # self.singleRepic = QtWidgets.QLabel(Form)
        # self.singleRepic.setGeometry(QtCore.QRect(0, 350, 1181, 500))
        # self.singleRepic.setText("")
        # self.singleRepic.setPixmap(QtGui.QPixmap(":/SingleRe/SingleRe.png"))
        # self.singleRepic.setObjectName("label")
        self.ReRanpic = QtWidgets.QLabel(self)
        self.ReRanpic.setGeometry(QtCore.QRect(0, 530*gl.h, 1100*gl.w, 400*gl.h))
        self.ReRanpic.setText("")
        self.ReRanpic.setPixmap(QtGui.QPixmap(":/SingleRe/SingleRe.png").scaled(1100*gl.w, 400*gl.h))
        self.ReRanpic.setObjectName("label")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.compareButton.setText(_translate("Form", "对比"))
        self.ExportButton.setText(_translate("Form", "导出"))
        # item = self.tableWidget.horizontalHeaderItem(0)
        # item.setText(_translate("Form", "勾选"))
        # item = self.tableWidget.horizontalHeaderItem(1)
        # item.setText(_translate("Form", "序号"))
        # item = self.tableWidget.horizontalHeaderItem(2)
        # item.setText(_translate("Form", "产品名称"))
        # item = self.tableWidget.horizontalHeaderItem(3)
        # item.setText(_translate("Form", "产品代号"))
        # item = self.tableWidget.horizontalHeaderItem(4)
        # item.setText(_translate("Form", "截面形状"))
        # item = self.tableWidget.horizontalHeaderItem(5)
        # item.setText(_translate("Form", "厚度"))
        # item = self.tableWidget.horizontalHeaderItem(6)
        # item.setText(_translate("Form", "应用方式"))
        # item = self.tableWidget.horizontalHeaderItem(7)
        # item.setText(_translate("Form", "弯曲情况"))
        # item = self.tableWidget.horizontalHeaderItem(8)
        # item.setText(_translate("Form", "传热能力"))
        # item = self.tableWidget.horizontalHeaderItem(9)
        # item.setText(_translate("Form", "热流密度"))
        # item = self.tableWidget.horizontalHeaderItem(10)
        # item.setText(_translate("Form", "重量"))
        # item = self.tableWidget.horizontalHeaderItem(11)
        # item.setText(_translate("Form", "液塞"))
        # item = self.tableWidget.horizontalHeaderItem(12)
        # item.setText(_translate("Form", "孔数"))
        # item = self.tableWidget.horizontalHeaderItem(13)
        # item.setText(_translate("Form", "操作"))
        self.productlist=self.InitPileSelectTableData()
        self.Refreash(self.productlist)

    def Export(self):
        fileName_choose, filetype = QtWidgets.QFileDialog.getSaveFileName(self,  
                                    "选取文件",  
                                    os.getcwd(), # 起始路径 
                                    "All Files (*);;Text Files (*.xlsx)")   # 设置文件扩展名过滤,用双分号间隔

        if fileName_choose == "":
            return
        workbook = xw.Workbook(fileName_choose)
        #写excel demo
        worksheet1 = workbook.add_worksheet("sheet1")
        worksheet1.activate()
        checklist=self.myTable.GetCheckedState()
        dicshaixuanInfo=eval(self.shaixuanInfo)
        rowindex=1
        merge_format = workbook.add_format({
    # 'bold':     True,
    # 'border':   6,
    'align':    'center',#水平居中
    # 'valign':   'vcenter',#垂直居中
    # 'fg_color': '#D7E4BC',#颜色填充
})
        for item in checklist:
            if item["checkstate"]==2:
                productinfo=ProductSelect.GetProductInfoById(item["productid"],self.productlist)
                title=[productinfo["name"]]
                # row = 'A' + str(rowindex)
                # worksheet1.write_row(row, title)
                rangeRow='A' + str(rowindex)+":G"+ str(rowindex)
                worksheet1.merge_range(rangeRow, title[0], merge_format)
                rowindex=rowindex+1
                rangeRow='A' + str(rowindex)+":G"+ str(rowindex)
                worksheet1.merge_range(rangeRow, "充装温度", merge_format)
                Rowtitle = list(range(int(float(dicshaixuanInfo['lowtemp'])), int(float(dicshaixuanInfo['hightemp'])), 5))
                Rowtitle.append(int(float(dicshaixuanInfo['hightemp'])))
                if int(float(dicshaixuanInfo['edingtemp'])) in Rowtitle:
                    pass
                else:
                    Rowtitle.append(int(float(dicshaixuanInfo['edingtemp'])))
                    Rowtitle.sort()
                rangeRow='A' + str(rowindex+1)+":A"+ str(rowindex+len(Rowtitle)+1)
                worksheet1.merge_range(rangeRow, "工作温度", merge_format)
                coltitle = list(range(10, 30, 5))
                coltitle.append(30)
                rowindex=rowindex+1
                row = 'B' + str(rowindex)
                coltitlelist=list(map(lambda x: str(x)+"℃", coltitle))
                coltitlelist.insert(0,str(""))
                print(coltitlelist)
                worksheet1.write_row(row, coltitlelist)

                for i in Rowtitle:
                    insertData=[]
                    insertData.append(str(i)+"℃")
                    for j in coltitle:
                        insertData.append(self.GetYaSaiTableInfo(i,j,item["productid"]))
                    rowindex=rowindex+1
                    row = 'B' + str(rowindex)
                    worksheet1.write_row(row, insertData)
                rowindex=rowindex+2
        workbook.close()  # 关闭表



    def Refreash(self,oData):
        self.oData=oData
        self.myTable.setTableContents(self.oData,self.shaixuanInfo)
        # irow=len(oData)
        # self.tableWidget.setRowCount(irow)
        # for row_number, row_data in enumerate(oData):
        #     self.tableWidget.setCellWidget(row_number, 0, self.CheckBoxForRow(row_number))
        #     self.tableWidget.setItem(row_number, 1, QtWidgets.QTableWidgetItem(str(row_number+1)))
        #     self.tableWidget.setItem(row_number, 2, QtWidgets.QTableWidgetItem(str(row_data["name"])))
        #     self.tableWidget.setItem(row_number, 3, QtWidgets.QTableWidgetItem(str(row_data["code"])))
        #     self.tableWidget.setItem(row_number, 4, QtWidgets.QTableWidgetItem(str(row_data["ishape"])))
        #     self.tableWidget.setItem(row_number, 5, QtWidgets.QTableWidgetItem(str(row_data["thickness"])))
        #     self.tableWidget.setItem(row_number, 6, QtWidgets.QTableWidgetItem(str(row_data["apptyle"])))
        #     self.tableWidget.setItem(row_number, 7, QtWidgets.QTableWidgetItem(str(row_data["wanqu"])))
        #     self.tableWidget.setItem(row_number, 8, QtWidgets.QTableWidgetItem(str(row_data["prtkong20"])))
        #     self.tableWidget.setItem(row_number, 9, QtWidgets.QTableWidgetItem(str(row_data["midulinjie20"])))
        #     self.tableWidget.setItem(row_number, 10, QtWidgets.QTableWidgetItem(self.GetWeight(row_data["midulinjie20"])))
        #     self.tableWidget.setItem(row_number, 11, QtWidgets.QTableWidgetItem(self.CalYeSai(self.shaixuanInfo,row_data["id"])))
        #     self.tableWidget.setItem(row_number, 12, QtWidgets.QTableWidgetItem(str(row_data["kongnum"])))
        #     self.tableWidget.setCellWidget(row_number, 13, self.buttonForRow(row_data["id"]))

    #复选框
    # def CheckBoxForRow(self,num):
    #     addBtn=CheckBoxInTable.MyCheckBox()
    #     addBtn.getidfromfather(num)
    #     addBtn.mySignal.connect(self.getcheckboxSignal)
    #     return addBtn
        # # widget=QtWidgets.QWidget()
        # addBtn = QtWidgets.QCheckBox('')
        # addBtn.setStyleSheet(''' text-align : center;
        #                           height : 30px;
        #                           border-style: outset;
        #                           font : 13px; ''')
        # addBtn.setChecked(True)
        # addBtn.clicked.connect(lambda: addBtn.setCheckState(QtCore.Qt.Unchecked))

        # # hLayout = QtWidgets.QHBoxLayout()
        # # # hLayout.addWidget(updateBtn)
        # # hLayout.addWidget(addBtn)
        # # hLayout.setContentsMargins(5,2,5,2)
        # # widget.setLayout(hLayout)


        # frame = QFrame()
        #             fLayout = QHBoxLayout()
        #             cb = QCheckBox()
        #             cb.isChecked()
        #             fLayout.addStretch()
        #             fLayout.addWidget(cb)
        #             fLayout.addStretch()
        #             frame.setLayout(fLayout)
        #             self.table2.setCellWidget(r, c, frame)
        #             self.cbs.append(cb)

        # return addBtn
    # def getcheckboxSignal(self,str1,str2):
    #     print(str1,str2)

     #查看液塞按钮
    # def buttonForRow(self,id):
    #     widget=QtWidgets.QWidget()
    #     addBtn = QtWidgets.QPushButton('查看液塞')
    #     addBtn.setStyleSheet(''' text-align : center;
    #                               background-color : NavajoWhite;
    #                               height : 30px;
    #                               border-style: outset;
    #                               font : 13px; ''')

    #     addBtn.clicked.connect(lambda: self.lookYeSai(id))
    #     hLayout = QtWidgets.QHBoxLayout()
    #     # hLayout.addWidget(updateBtn)
    #     hLayout.addWidget(addBtn)
    #     hLayout.setContentsMargins(5,2,5,2)
    #     widget.setLayout(hLayout)
    #     return widget

    #查看液塞按钮
    # def lookYeSai(self,id):
    #     if hasattr(self,"ChartView"):
    #         self.ChartView.close()
    #     else:
    #         pass
    #     if hasattr(self,"ReRanpic"):
    #         self.ReRanpic.close()
    #     else:
    #         pass
    #     if hasattr(self,"settemp"):
    #         self.settemp.close()
    #     else:
    #         pass
    #     if hasattr(self,"settemplabel"):
    #         self.settemplabel.close()
    #     else:
    #         pass
    #     my = Ui_setbox.MyDialog(self)
    #     my.SetProductID(id)
    #     # 在主窗口中连接信号和槽
    #     my.mySignal.connect(self.getDialogSignal)
    #     my.exec_()

    # def getDialogSignal(self, connect):
    #     dic=eval(connect)
    #     CalYeSaiData={}
    #     if len(self.shaixuanInfo)==0:
    #         #提示 为点击筛选
    #         MsgBox=QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, '提示', '还未进行筛选操作!')
    #         MsgBox.setGeometry(QtCore.QRect(1000, 500, 500, 500))
    #         MsgBox.exec_()
    #         pass
    #     else:
    #         dicshaixuanInfo=eval(self.shaixuanInfo)
    #         CalYeSaiData['hightemp']=dicshaixuanInfo['hightemp']#最高工作温度
    #         CalYeSaiData['lowtemp']=dicshaixuanInfo['lowtemp']#最低工作温度
    #         CalYeSaiData['edingtemp']=dicshaixuanInfo['edingtemp']#额定工作温度
    #         CalYeSaiData['iempjiange']=dic['iempjiange']#温度间隔
    #         CalYeSaiData['chongzhuangtemp']=dic['tempeding']#额定充装温度
    #         CalYeSaiData['chongzhuangtempup']=dic['tempup']#充装温度上限
    #         CalYeSaiData['chongzhuangtempdn']=dic['tempdn']#充装温度下线
    #         CalYeSaiData['productid']=dic['productid']#产品id
    #         # a = list(range(float(CalYeSaiData['hightemp']), float(CalYeSaiData['lowtemp']), float(CalYeSaiData['iempjiange'])))
    #         Rowtitle = list(range(int(float(CalYeSaiData['lowtemp'])), int(float(CalYeSaiData['hightemp'])), int(float(CalYeSaiData['iempjiange']))))
    #         #range 是开区间 需要补齐最后一个数
    #         Rowtitle.append(int(float(CalYeSaiData['hightemp'])))
    #         if int(float(CalYeSaiData['edingtemp'])) in Rowtitle:
    #             pass
    #         else:
    #             Rowtitle.append(int(float(CalYeSaiData['edingtemp'])))
    #         Rowtitle.sort()
    #         coltitle=list()
    #         coltitle.append(float(CalYeSaiData['chongzhuangtempdn']))
    #         coltitle.append(float(CalYeSaiData['chongzhuangtemp']))
    #         coltitle.append(float(CalYeSaiData['chongzhuangtempup']))
    #         #  
    #         if hasattr(self,"yesaitable"):
    #             self.yesaitable.close()
    #         else:
    #             pass
    #         self.yesaitable=YeSaiTable.YeSaiTable(self)
    #         self.yesaitable.setupUi(self)
    #         # self.yesaitable.setTableInfo(Rowtitle,coltitle)
    #         #填充表格内容
    #         self.FillTableInFo(self.yesaitable,Rowtitle,coltitle,int(float(CalYeSaiData['productid'])))
    #         self.yesaitable.show()

    #对比按钮
    def DrowCompare(self):
        checklist=self.myTable.GetCheckedState()
        if hasattr(self,"yesaitable"):
            self.yesaitable.close()
        else:
            pass
        # if hasattr(self,"ChartView2"):
        #     self.ChartView2.close()
        # else:
        #     pass
        if hasattr(self,"ReRanpic"):
            self.ReRanpic.close()
        else:
            pass
        if hasattr(self,"ChartView"):
            self.ChartView.initChart()
        else:
            self.ChartView=LineStack.ChartView(self)
        self.ChartView.setGeometry(QtCore.QRect(0, 560*gl.h, 1100*gl.w, 436*gl.h))
        tempData=self.MakeCompareChartData(checklist)
        self.ChartView.SetData(tempData)
        self.ChartView.DrawChart()
        self.ChartView.show()

        
        # # if hasattr(self,"settemplabel"):
        # #     pass
        # # else:
        # #     self.settemplabel = QtWidgets.QLabel(_Form)
        # # if hasattr(self,"settemp"):
        # #     pass
        # # else:
        # #     self.settemp = QtWidgets.QLineEdit(_Form)
        # # self.settemplabel.setGeometry(QtCore.QRect(0, 520, 100, 20))
        # # self.settemplabel.setObjectName("settemplabel")
        # # self.settemp.setGeometry(QtCore.QRect(100, 520, 100, 20))
        # # self.settemp.setObjectName("tempup")
        # _translate = QtCore.QCoreApplication.translate
        # # self.settemplabel.setText(_translate("_Form", "充装温度："))
        # # self.settemp.setText(_translate("_Form", "10"))
        # # self.settemplabel.show()
        # # self.settemp.show()
    
    #刷新热源图片
    def freshenReRanPic(self,num):
        if hasattr(self,"ChartView"):
            self.ChartView.close()
        else:
            pass
        # if hasattr(self,"settemp"):
        #     self.settemp.close()
        # else:
        #     pass
        # if hasattr(self,"settemplabel"):
        #     self.settemplabel.close()
        # else:
        #     pass
        if hasattr(self,"yesaitable"):
            self.yesaitable.close()
        else:
            pass
        # if hasattr(self,"ChartView2"):
        #     self.ChartView2.close()
        # else:
        #     pass
        if hasattr(self,"ReRanpic"):
            self.ReRanpic.close()
        else:
            pass
        self.ReRanpic = QtWidgets.QLabel(self)
        self.ReRanpic.setGeometry(QtCore.QRect(0, 530*gl.h, 1100*gl.w, 400*gl.h))
        self.ReRanpic.setText("")
        if num==1:
            pixmap=QtGui.QPixmap(":/SingleRe/SingleRe.png").scaled(1100*gl.w,400*gl.h)
            # pixmap.scaled(550*gl.w,250*gl.h,QtCore.Qt.IgnoreAspectRatio,QtCore.Qt.SmoothTransformation)
            self.ReRanpic.setPixmap(pixmap)
        else:
            pixmap=QtGui.QPixmap(":/SingleRe/MuiltRe.png").scaled(1100*gl.w,400*gl.h)
            # pixmap.scaled(550*gl.w,250*gl.h)
            self.ReRanpic.setPixmap(pixmap)
        self.ReRanpic.setObjectName("label")
        self.ReRanpic.show()
    
    #父页面传值，获取将筛选信息
    def GetParaFromFatherFrom(self,oPara):
        self.shaixuanInfo=oPara
        self.productlist=self.InitPileSelectTableData()
        self.Refreash(self.productlist)
    
    #获取数据库产品详细
    def InitPileSelectTableData(self):
        ProductSelect.GetDensityInfo()
        return ProductSelect.GetProductInfo()

    #计算重量，当用户为点击筛选的时候无法获取长度 为空
    def GetWeight(self,vapordensity):
        if len(self.shaixuanInfo)==0:
            return str(0.00)
        else:
            dicshaixuanInfo=eval(self.shaixuanInfo)
            # lis=[]
            # for item in dicshaixuanInfo["tabledata"]:
            #     lis.append(item["juli"])
            # rongcha=float(dicshaixuanInfo["rongcha"])
            l=self.GetL()
            return str(vapordensity*l)
    #计算产品表格中的液塞
    def CalYeSai(self,shaixuanInfo,productid):
        lenght=self.GetL()
        lenght1=self.GetRongCha()
        return ProductSelect.CalYeSaiByid(shaixuanInfo,productid,lenght,lenght1)
    #获取热管总长
    def GetL(self):
        if len(self.shaixuanInfo)==0:
            return 0.0
        else:
            dicshaixuanInfo=eval(self.shaixuanInfo)
            lis=[]
            for item in dicshaixuanInfo["tabledata"]:
                lis.append(item["juli"])
            l=max(lis)
            l=l+self.GetRongCha()
            return l
     #获取液塞容差
    def GetRongCha(self):
        if len(self.shaixuanInfo)==0:
            return 0.0
        else:
            dicshaixuanInfo=eval(self.shaixuanInfo)
            return float(dicshaixuanInfo["rongcha"])

    #根据充装温度 工作温度输出表格内容
    def GetYaSaiTableInfo(self,worktemp,chongzhaungtemp,productid):
        print("----------------------------------------------------------------------")
        productinfo=ProductSelect.GetProductInfoById(productid,self.productlist)
        Densitylist=ProductSelect.GetDensityInfo()
        p1=ProductSelect.GetLiquiddensityByTemp(chongzhaungtemp,Densitylist)
        Sc=float(productinfo["caoa"])
        p2=ProductSelect.GetVapordensityByTemp(chongzhaungtemp,Densitylist)
        sq=float(productinfo["chongqiqianga"])
        lim_1=float(productinfo["chongzhuangdn"])
        lim_2=float(productinfo["chongzhuangup"])
        p3=ProductSelect.GetLiquiddensityByTemp(worktemp,Densitylist)
        p4=ProductSelect.GetVapordensityByTemp(worktemp,Densitylist)
        le_1=ProductSelect.data_hp(p1,Sc,p2,sq,lim_1,p3,p4)
        #     #p1:充装温度对应的液体密度
#     #Sc：槽道面积
#     #p2：充装温度对应的气体密度
#     #sq：蒸气腔面积
#     #lim_l：充装量下\上限
#     #p3：低\高温对应的液体密度
#     #p4：低\高温对应的气体密度
        print('充装温度：',chongzhaungtemp)
        print('工作温温度：',worktemp)
        print('充装温度对应的液体密度',p1)
        print('槽道面积',Sc)
        print('p2：充装温度对应的气体密度',p2)
        print('蒸气腔面积',sq)
        print('充装量下限',lim_1)
        print('充装量上限',lim_2)
        print('工作温对应的液体密度',p3)
        print('工作温对应的气体密度',p4)
        le_2=ProductSelect.data_hp(p1,Sc,p2,sq,lim_2,p3,p4)
        print("在给定充装温度",chongzhaungtemp,"下，工作温度",worktemp,"充装量下限液塞长度",le_1)
        print("在给定充装温度",chongzhaungtemp,"下，工作温度",worktemp,"充装量上限液塞长度",le_2)
        lenght=self.GetL()
        lenght1=self.GetRongCha()
        d=float(productinfo["allowmaxp"])
        print('热管总长',lenght)
        print('液塞容差',lenght1)
        print('最大回退百分比',d)
        print(ProductSelect.disp(le_1,le_2,d,lenght,lenght1))
        return ProductSelect.disp(le_1,le_2,d,lenght,lenght1)
      
    #填充查看液塞表格内容
    def FillTableInFo(self,table,Rowtitle,coltitle,productid):
        table.setTableInfo(Rowtitle,coltitle)
        for i in range(len(Rowtitle)):
            for j in range(len(coltitle)):
                cellmsg=self.GetYaSaiTableInfo(Rowtitle[i],coltitle[j],productid)
                table.setItem(i+2, j+2, QtWidgets.QTableWidgetItem(cellmsg))
    
    def MakeYeSaiTable(self,str1,str2,str3):
        if hasattr(self,"ChartView"):
            self.ChartView.close()
        else:
            pass
        if hasattr(self,"ReRanpic"):
            self.ReRanpic.close()
        else:
            pass
        CalYeSaiData=eval(str1)
        Rowtitle=eval(str2)
        coltitle=eval(str3)
        if hasattr(self,"yesaitable"):
                self.yesaitable.close()
        else:
            pass
        # if hasattr(self,"ChartView2"):
        #         self.ChartView2.close()
        # else:
        #     pass
        self.yesaitable=YeSaiTable.YeSaiTable(self)
        self.yesaitable.setupUi(self)
        # self.yesaitable.setTableInfo(Rowtitle,coltitle)
            #填充表格内容
        self.FillTableInFo(self.yesaitable,Rowtitle,coltitle,int(float(CalYeSaiData['productid'])))
        width=self.yesaitable.columnCount()*50*gl.w+5*gl.w
        if width>1200*gl.w:
            width=1200*gl.w
        self.yesaitable.setGeometry(QtCore.QRect(0, 560*gl.h, width*gl.w, 400*gl.h))
        self.yesaitable.show()
        # self.ChartView2=LineStack.ChartView(self)
        # tempData=self.MakeChartData(CalYeSaiData,Rowtitle,coltitle)
        # self.ChartView2.SetData(tempData)
        # self.ChartView2.DrawChart()
        # self.ChartView2.setGeometry(QtCore.QRect(236, 560, 980, 400))
        # self.ChartView2.show()
    
    def MakeChartData(self,CalYeSaiData,Rowtitle,coltitle):
        tempData={}
        #传入数值不为空
        if CalYeSaiData and Rowtitle and coltitle:
            productinfo=ProductSelect.GetProductInfoById(int(float(CalYeSaiData['productid'])),ProductSelect.GetProductInfo())
            tempData["category"]=[]
            for m in Rowtitle:
                tempData["category"].append(str(m))
            tempData["title"]=productinfo["name"]
            tempData["dataTable"]=[]
            #记录所有的液塞值 来划定纵坐标的范围
            AllYesaiValue=[]
            for i in coltitle:
                item=[]
                item.append(str(i)+"℃")
                # item[str(i)+"℃"]=[]
                lis=[]
                for j in Rowtitle:
                    value=self.GetYaSaiTableInfo(j,i,int(float(CalYeSaiData['productid'])))
                    if "失效" in value:
                        #未完成 
                        lis.append(-999)
                        AllYesaiValue.append(0)
                    else:
                        lis.append(float(value))
                        AllYesaiValue.append(float(value))
                item.append(lis)
                tempData["dataTable"].append(item)
            tempData["XTickCount"]=len(Rowtitle)
            tempData["YTickCount"]=7
            tempData["YRangeMax"]=math.ceil(max(AllYesaiValue))
            tempData["YRangeMin"]=math.floor(min(AllYesaiValue))
            return tempData
        else:
            return tempData
    
    def MakeCompareChartData(self,checklist):
        tempData={}
        dicshaixuanInfo=eval(self.shaixuanInfo)
        Rowtitle = list(range(int(float(dicshaixuanInfo['lowtemp'])), int(float(dicshaixuanInfo['hightemp'])), 5))
            #range 是开区间 需要补齐最后一个数
        Rowtitle.append(int(float(dicshaixuanInfo['hightemp'])))
        if int(float(dicshaixuanInfo['edingtemp'])) in Rowtitle:
            pass
        else:
            Rowtitle.append(int(float(dicshaixuanInfo['edingtemp'])))
        Rowtitle.sort()
        tempData["category"]=[]
        for m in Rowtitle:
            tempData["category"].append(str(m))
        tempData["title"]="不同产品在"+dicshaixuanInfo['edingtemp']+"℃充装温度下液塞"
        tempData["dataTable"]=[]
        AllYesaiValue=[]
        checkedproductIdlist=[]
        for j in checklist:
            if j["checkstate"]==2:
                checkedproductIdlist.append(j["productid"])
        #若没勾选 则不绘图
        if len(checkedproductIdlist)<1:
            return {}
        for k in checkedproductIdlist:
            item=[]
            productname=(ProductSelect.GetProductInfoById(k,ProductSelect.GetProductInfo()))["name"]
            item.append(productname)
            lis=[]
            for l in Rowtitle:
                value=self.GetYaSaiTableInfo(l,float(dicshaixuanInfo["edingtemp"]),k)
                if "失效" in value:
                    lis.append(-999)
                    AllYesaiValue.append(0)
                else:
                    lis.append(float(value))
                    AllYesaiValue.append(float(value))
            item.append(lis)
            tempData["dataTable"].append(item)
        tempData["XTickCount"]=len(Rowtitle)
        tempData["YTickCount"]=7
        tempData["YRangeMax"]=math.ceil(max(AllYesaiValue))
        tempData["YRangeMin"]=math.floor(min(AllYesaiValue))
        return tempData
        # for i in coltitle:
        #         item=[]
        #         item.append(str(i)+"℃")
        #         # item[str(i)+"℃"]=[]
        #         lis=[]
        #         for j in Rowtitle:
        #             value=self.GetYaSaiTableInfo(j,i,int(float(CalYeSaiData['productid'])))
        #             if "失效" in value:
        #                 #未完成 
        #                 lis.append(-999)
        #                 AllYesaiValue.append(0)
        #             else:
        #                 lis.append(float(value))
        #                 AllYesaiValue.append(float(value))
        #         item.append(lis)
        #         tempData["dataTable"].append(item)
        

        

        
    
  