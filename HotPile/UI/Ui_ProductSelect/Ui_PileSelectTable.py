# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'd:\HotPile\UI\PileSelectTable.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import os
import numpy
import math
import xlsxwriter as xw
from PyQt5 import QtCore, QtGui, QtWidgets
from Subassembly import LineStack,Ui_setbox,CheckBoxInTable,YeSaiTable,MyTable
from Tools import ProductSelect
import gl


class Ui_PileSelectTable(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1800*gl.w, 1000*gl.h)
        self.shaixuanInfo=''
        self.productlist=[]
        self.compareButton = QtWidgets.QPushButton(Form)
        self.compareButton.setGeometry(QtCore.QRect(1120*gl.w, 510*gl.h, 75*gl.w, 23*gl.h))
        self.compareButton.setObjectName("compareButton")
        self.ExportButton = QtWidgets.QPushButton(Form)
        self.ExportButton.setGeometry(QtCore.QRect(1020*gl.w, 510*gl.h, 75*gl.w, 23*gl.h))
        self.ExportButton.setObjectName("ExportButton")
        self.myTable=MyTable.TableDemo(Form)
        self.myTable.setGeometry(QtCore.QRect(0, 20*gl.h, 1200*gl.w, 480*gl.h))
        self.myTable.mySignal.connect(self.MakeYeSaiTable)
        self.compareButton.clicked.connect(lambda:self.DrowCompare())
        self.ExportButton.clicked.connect(lambda:self.Export())
        self.ReRanpic = QtWidgets.QLabel(self)
        self.ReRanpic.setGeometry(QtCore.QRect(0, 530*gl.h, 1100*gl.w, 400*gl.h))
        self.ReRanpic.setText("")
        self.ReRanpic.setPixmap(QtGui.QPixmap(":/SingleRe/SingleRe.png").scaled(1100*gl.w, 400*gl.h))
        self.ReRanpic.setObjectName("label")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.compareButton.setText(_translate("Form", "对比"))
        self.ExportButton.setText(_translate("Form", "导出"))
        self.productlist=self.InitPileSelectTableData()
        self.Refreash(self.productlist)

    def Export(self):
        fileName_choose, filetype = QtWidgets.QFileDialog.getSaveFileName(self,  
                                    "选取文件",  
                                    os.getcwd(), # 起始路径 
                                    "All Files (*);;Text Files (*.xlsx)")   # 设置文件扩展名过滤,用双分号间隔

        if fileName_choose == "":
            return
        workbook = xw.Workbook(fileName_choose)
        #写excel demo
        worksheet1 = workbook.add_worksheet("sheet1")
        worksheet1.activate()
        checklist=self.myTable.GetCheckedState()
        dicshaixuanInfo=eval(self.shaixuanInfo)
        rowindex=1
        merge_format = workbook.add_format({
    # 'bold':     True,
    # 'border':   6,
    'align':    'center',#水平居中
    # 'valign':   'vcenter',#垂直居中
    # 'fg_color': '#D7E4BC',#颜色填充
})
        for item in checklist:
            if item["checkstate"]==2:
                productinfo=ProductSelect.GetProductInfoById(item["productid"],self.productlist)
                title=[productinfo["name"]]
                # row = 'A' + str(rowindex)
                # worksheet1.write_row(row, title)
                rangeRow='A' + str(rowindex)+":G"+ str(rowindex)
                worksheet1.merge_range(rangeRow, title[0], merge_format)
                rowindex=rowindex+1
                rangeRow='A' + str(rowindex)+":G"+ str(rowindex)
                worksheet1.merge_range(rangeRow, "充装温度", merge_format)
                Rowtitle = list(range(int(float(dicshaixuanInfo['lowtemp'])), int(float(dicshaixuanInfo['hightemp'])), 5))
                Rowtitle.append(int(float(dicshaixuanInfo['hightemp'])))
                if int(float(dicshaixuanInfo['edingtemp'])) in Rowtitle:
                    pass
                else:
                    Rowtitle.append(int(float(dicshaixuanInfo['edingtemp'])))
                    Rowtitle.sort()
                rangeRow='A' + str(rowindex+1)+":A"+ str(rowindex+len(Rowtitle)+1)
                worksheet1.merge_range(rangeRow, "工作温度", merge_format)
                coltitle = list(range(10, 30, 5))
                coltitle.append(30)
                rowindex=rowindex+1
                row = 'B' + str(rowindex)
                coltitlelist=list(map(lambda x: str(x)+"℃", coltitle))
                coltitlelist.insert(0,str(""))
                print(coltitlelist)
                worksheet1.write_row(row, coltitlelist)

                for i in Rowtitle:
                    insertData=[]
                    insertData.append(str(i)+"℃")
                    for j in coltitle:
                        insertData.append(self.GetYaSaiTableInfo(i,j,item["productid"]))
                    rowindex=rowindex+1
                    row = 'B' + str(rowindex)
                    worksheet1.write_row(row, insertData)
                rowindex=rowindex+2
        workbook.close()  # 关闭表



    def Refreash(self,oData):
        self.oData=oData
        self.myTable.setTableContents(self.oData,self.shaixuanInfo)

    #对比按钮
    def DrowCompare(self):
        checklist=self.myTable.GetCheckedState()
        if hasattr(self,"yesaitable"):
            self.yesaitable.close()
        else:
            pass
        if hasattr(self,"ReRanpic"):
            self.ReRanpic.close()
        else:
            pass
        if hasattr(self,"ChartView"):
            self.ChartView.initChart()
        else:
            self.ChartView=LineStack.ChartView(self)
        self.ChartView.setGeometry(QtCore.QRect(0, 560*gl.h, 1100*gl.w, 436*gl.h))
        tempData=self.MakeCompareChartData(checklist)
        self.ChartView.SetData(tempData)
        self.ChartView.DrawChart()
        self.ChartView.show()
    
    #刷新热源图片
    def freshenReRanPic(self,num):
        if hasattr(self,"ChartView"):
            self.ChartView.close()
        else:
            pass
        if hasattr(self,"yesaitable"):
            self.yesaitable.close()
        else:
            pass
        if hasattr(self,"ReRanpic"):
            self.ReRanpic.close()
        else:
            pass
        self.ReRanpic = QtWidgets.QLabel(self)
        self.ReRanpic.setGeometry(QtCore.QRect(0, 530*gl.h, 1100*gl.w, 400*gl.h))
        self.ReRanpic.setText("")
        if num==1:
            pixmap=QtGui.QPixmap(":/SingleRe/SingleRe.png").scaled(1100*gl.w,400*gl.h)
            self.ReRanpic.setPixmap(pixmap)
        else:
            pixmap=QtGui.QPixmap(":/SingleRe/MuiltRe.png").scaled(1100*gl.w,400*gl.h)
            # pixmap.scaled(550*gl.w,250*gl.h)
            self.ReRanpic.setPixmap(pixmap)
        self.ReRanpic.setObjectName("label")
        self.ReRanpic.show()
    
    #父页面传值，获取将筛选信息
    def GetParaFromFatherFrom(self,oPara):
        self.shaixuanInfo=oPara
        self.productlist=self.InitPileSelectTableData()
        self.Refreash(self.productlist)
    
    #获取数据库产品详细
    def InitPileSelectTableData(self):
        ProductSelect.GetDensityInfo()
        return ProductSelect.GetProductInfo()

    #计算重量，当用户为点击筛选的时候无法获取长度 为空
    def GetWeight(self,vapordensity):
        if len(self.shaixuanInfo)==0:
            return str(0.00)
        else:
            dicshaixuanInfo=eval(self.shaixuanInfo)
            l=self.GetL()
            return str(vapordensity*l)
    #计算产品表格中的液塞
    def CalYeSai(self,shaixuanInfo,productid):
        lenght=self.GetL()
        lenght1=self.GetRongCha()
        return ProductSelect.CalYeSaiByid(shaixuanInfo,productid,lenght,lenght1)
    #获取热管总长
    def GetL(self):
        if len(self.shaixuanInfo)==0:
            return 0.0
        else:
            dicshaixuanInfo=eval(self.shaixuanInfo)
            lis=[]
            for item in dicshaixuanInfo["tabledata"]:
                lis.append(item["juli"])
            l=max(lis)
            l=l+self.GetRongCha()
            return l
     #获取液塞容差
    def GetRongCha(self):
        if len(self.shaixuanInfo)==0:
            return 0.0
        else:
            dicshaixuanInfo=eval(self.shaixuanInfo)
            return float(dicshaixuanInfo["rongcha"])

    #根据充装温度 工作温度输出表格内容
    def GetYaSaiTableInfo(self,worktemp,chongzhaungtemp,productid):
        print("----------------------------------------------------------------------")
        productinfo=ProductSelect.GetProductInfoById(productid,self.productlist)
        Densitylist=ProductSelect.GetDensityInfo()
        p1=ProductSelect.GetLiquiddensityByTemp(chongzhaungtemp,Densitylist)
        Sc=float(productinfo["caoa"])
        p2=ProductSelect.GetVapordensityByTemp(chongzhaungtemp,Densitylist)
        sq=float(productinfo["chongqiqianga"])
        lim_1=float(productinfo["chongzhuangdn"])
        lim_2=float(productinfo["chongzhuangup"])
        p3=ProductSelect.GetLiquiddensityByTemp(worktemp,Densitylist)
        p4=ProductSelect.GetVapordensityByTemp(worktemp,Densitylist)
        le_1=ProductSelect.data_hp(p1,Sc,p2,sq,lim_1,p3,p4)
        #     #p1:充装温度对应的液体密度
#     #Sc：槽道面积
#     #p2：充装温度对应的气体密度
#     #sq：蒸气腔面积
#     #lim_l：充装量下\上限
#     #p3：低\高温对应的液体密度
#     #p4：低\高温对应的气体密度
        print('充装温度：',chongzhaungtemp)
        print('工作温温度：',worktemp)
        print('充装温度对应的液体密度',p1)
        print('槽道面积',Sc)
        print('p2：充装温度对应的气体密度',p2)
        print('蒸气腔面积',sq)
        print('充装量下限',lim_1)
        print('充装量上限',lim_2)
        print('工作温对应的液体密度',p3)
        print('工作温对应的气体密度',p4)
        le_2=ProductSelect.data_hp(p1,Sc,p2,sq,lim_2,p3,p4)
        print("在给定充装温度",chongzhaungtemp,"下，工作温度",worktemp,"充装量下限液塞长度",le_1)
        print("在给定充装温度",chongzhaungtemp,"下，工作温度",worktemp,"充装量上限液塞长度",le_2)
        lenght=self.GetL()
        lenght1=self.GetRongCha()
        d=float(productinfo["allowmaxp"])
        print('热管总长',lenght)
        print('液塞容差',lenght1)
        print('最大回退百分比',d)
        print(ProductSelect.disp(le_1,le_2,d,lenght,lenght1))
        return ProductSelect.disp(le_1,le_2,d,lenght,lenght1)
      
    #填充查看液塞表格内容
    def FillTableInFo(self,table,Rowtitle,coltitle,productid):
        table.setTableInfo(Rowtitle,coltitle)
        for i in range(len(Rowtitle)):
            for j in range(len(coltitle)):
                cellmsg=self.GetYaSaiTableInfo(Rowtitle[i],coltitle[j],productid)
                table.setItem(i+2, j+2, QtWidgets.QTableWidgetItem(cellmsg))
    
    def MakeYeSaiTable(self,str1,str2,str3):
        if hasattr(self,"ChartView"):
            self.ChartView.close()
        else:
            pass
        if hasattr(self,"ReRanpic"):
            self.ReRanpic.close()
        else:
            pass
        CalYeSaiData=eval(str1)
        Rowtitle=eval(str2)
        coltitle=eval(str3)
        if hasattr(self,"yesaitable"):
                self.yesaitable.close()
        else:
            pass
        self.yesaitable=YeSaiTable.YeSaiTable(self)
        self.yesaitable.setupUi(self)
        # self.yesaitable.setTableInfo(Rowtitle,coltitle)
            #填充表格内容
        self.FillTableInFo(self.yesaitable,Rowtitle,coltitle,int(float(CalYeSaiData['productid'])))
        width=self.yesaitable.columnCount()*50*gl.w+5*gl.w
        if width>1200*gl.w:
            width=1200*gl.w
        self.yesaitable.setGeometry(QtCore.QRect(0, 560*gl.h, width*gl.w, 400*gl.h))
        self.yesaitable.show()
    
    def MakeChartData(self,CalYeSaiData,Rowtitle,coltitle):
        tempData={}
        #传入数值不为空
        if CalYeSaiData and Rowtitle and coltitle:
            productinfo=ProductSelect.GetProductInfoById(int(float(CalYeSaiData['productid'])),ProductSelect.GetProductInfo())
            tempData["category"]=[]
            for m in Rowtitle:
                tempData["category"].append(str(m))
            tempData["title"]=productinfo["name"]
            tempData["dataTable"]=[]
            #记录所有的液塞值 来划定纵坐标的范围
            AllYesaiValue=[]
            for i in coltitle:
                item=[]
                item.append(str(i)+"℃")
                # item[str(i)+"℃"]=[]
                lis=[]
                for j in Rowtitle:
                    value=self.GetYaSaiTableInfo(j,i,int(float(CalYeSaiData['productid'])))
                    if "失效" in value:
                        #未完成 
                        lis.append(-999)
                        AllYesaiValue.append(0)
                    else:
                        lis.append(float(value))
                        AllYesaiValue.append(float(value))
                item.append(lis)
                tempData["dataTable"].append(item)
            tempData["XTickCount"]=len(Rowtitle)
            tempData["YTickCount"]=7
            tempData["YRangeMax"]=math.ceil(max(AllYesaiValue))
            tempData["YRangeMin"]=math.floor(min(AllYesaiValue))
            return tempData
        else:
            return tempData
    
    def MakeCompareChartData(self,checklist):
        tempData={}
        dicshaixuanInfo=eval(self.shaixuanInfo)
        Rowtitle = list(range(int(float(dicshaixuanInfo['lowtemp'])), int(float(dicshaixuanInfo['hightemp'])), 5))
            #range 是开区间 需要补齐最后一个数
        Rowtitle.append(int(float(dicshaixuanInfo['hightemp'])))
        if int(float(dicshaixuanInfo['edingtemp'])) in Rowtitle:
            pass
        else:
            Rowtitle.append(int(float(dicshaixuanInfo['edingtemp'])))
        Rowtitle.sort()
        tempData["category"]=[]
        for m in Rowtitle:
            tempData["category"].append(str(m))
        tempData["title"]="不同产品在"+dicshaixuanInfo['edingtemp']+"℃充装温度下液塞"
        tempData["dataTable"]=[]
        AllYesaiValue=[]
        checkedproductIdlist=[]
        for j in checklist:
            if j["checkstate"]==2:
                checkedproductIdlist.append(j["productid"])
        #若没勾选 则不绘图
        if len(checkedproductIdlist)<1:
            return {}
        for k in checkedproductIdlist:
            item=[]
            productname=(ProductSelect.GetProductInfoById(k,ProductSelect.GetProductInfo()))["name"]
            item.append(productname)
            lis=[]
            for l in Rowtitle:
                value=self.GetYaSaiTableInfo(l,float(dicshaixuanInfo["edingtemp"]),k)
                if "失效" in value:
                    lis.append(-999)
                    AllYesaiValue.append(0)
                else:
                    lis.append(float(value))
                    AllYesaiValue.append(float(value))
            item.append(lis)
            tempData["dataTable"].append(item)
        tempData["XTickCount"]=len(Rowtitle)
        tempData["YTickCount"]=7
        tempData["YRangeMax"]=math.ceil(max(AllYesaiValue))
        tempData["YRangeMin"]=math.floor(min(AllYesaiValue))
        return tempData
